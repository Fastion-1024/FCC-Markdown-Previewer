{"version":3,"sources":["dockContext.js","Components/DockContainer.js","Resources/placeholderMD.md","markdownContext.js","Components/Tooltip.js","Components/DropDownButton.js","Components/Editor.js","Components/Previewer.js","App.js","index.js"],"names":["DockContext","React","createContext","DockProvider","children","useState","isRow","setIsRow","isReversed","setIsReversed","isPanel1Maximised","setIsPanel1Maximised","isPanel2Maximised","setIsPanel2Maximised","windowDimensions","setWindowDimensions","useEffect","handleResize","window","width","innerWidth","height","innerHeight","getWindowDimensions","addEventListener","removeEventListener","Provider","value","togglePanel1ExpandCollapse","togglePanel2ExpandCollapse","switchPanels","useDockContext","useContext","DockContainer","className","MarkdownContext","MarkdownProvider","editorText","setEditorText","editorLineNumbers","setEditorLineNumbers","previewerHTML","setPreviewerHTML","isLightThemeActive","setIsLightThemeActive","fetchPlaceholderText","updateLineNumbers","updatePreviewerText","a","fetch","placeholderText","response","text","data","content","split","newLineNumbers","i","length","marked","setOptions","breaks","dirty","clean","DOMPurify","sanitize","USE_PROFILES","html","fallbackCopyTextToClipboard","element","document","createElement","setAttribute","style","position","left","body","appendChild","select","message","execCommand","console","log","error","removeChild","sePreviewerHTML","toggleTheme","copyTextToClipboard","navigator","clipboard","writeText","then","useMarkdownContext","Tooltip","props","toolTipDelay","delay","isActive","setIsActive","onMouseEnter","setTimeout","onMouseLeave","clearTimeout","DropDownButton","focusable","onClick","Editor","scrollRef","useRef","toolbarSmall","toolbarLarge","htmlFor","id","readOnly","ref","tabIndex","wrap","autoFocus","onChange","e","target","onScroll","current","scrollTop","handleScroll","Previewer","dangerouslySetInnerHTML","__html","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a42633c8.chunk.js","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\n\r\nconst DockContext = React.createContext();\r\n\r\nconst DockProvider = ({ children }) => {\r\n    const [isRow, setIsRow] = useState(true);\r\n    const [isReversed, setIsReversed] = useState(false);\r\n    const [isPanel1Maximised, setIsPanel1Maximised] = useState(false);\r\n    const [isPanel2Maximised, setIsPanel2Maximised] = useState(false);\r\n    const [windowDimensions, setWindowDimensions] = useState({});\r\n\r\n    const togglePanel1ExpandCollapse = () => {\r\n        // Only one panel may be expanded at a time.\r\n        setIsPanel1Maximised(!isPanel1Maximised);\r\n        isPanel1Maximised && setIsPanel2Maximised(false);\r\n    };\r\n\r\n    const togglePanel2ExpandCollapse = () => {\r\n        // Only one panel may be expanded at a time.\r\n        setIsPanel2Maximised(!isPanel2Maximised);\r\n        isPanel2Maximised && setIsPanel1Maximised(false);\r\n    };\r\n\r\n    const switchPanels = () => {\r\n        if (isPanel1Maximised) {\r\n            setIsPanel1Maximised(false);\r\n            setIsPanel2Maximised(true);\r\n        } else if (isPanel2Maximised) {\r\n            setIsPanel1Maximised(true);\r\n            setIsPanel2Maximised(false);\r\n        }\r\n    };\r\n\r\n    const getWindowDimensions = () => {\r\n        const { innerWidth: width, innerHeight: height } = window;\r\n        return { width, height };\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setWindowDimensions(getWindowDimensions());\r\n        };\r\n\r\n        handleResize();\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (windowDimensions.width <= 768) {\r\n            if (!isPanel1Maximised && !isPanel2Maximised) {\r\n                setIsPanel1Maximised(true);\r\n            }\r\n        }\r\n    }, [windowDimensions]);\r\n\r\n    return (\r\n        <DockContext.Provider\r\n            value={{\r\n                isRow,\r\n                isReversed,\r\n                setIsRow,\r\n                setIsReversed,\r\n                isPanel1Maximised,\r\n                isPanel2Maximised,\r\n                togglePanel1ExpandCollapse,\r\n                togglePanel2ExpandCollapse,\r\n                windowDimensions,\r\n                switchPanels,\r\n            }}\r\n        >\r\n            {children}\r\n        </DockContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useDockContext = () => {\r\n    return useContext(DockContext);\r\n};\r\n\r\nexport { DockContext, DockProvider };\r\n","import { useDockContext } from '../dockContext';\r\n\r\nconst DockContainer = ({ children }) => {\r\n    const { isRow, isReversed, isPanel1Maximised, isPanel2Maximised } =\r\n        useDockContext();\r\n\r\n    // Panel1 Maximised\r\n    if (isPanel1Maximised) {\r\n        return (\r\n            <div className='dock-container'>\r\n                <div className='panel1'>{children[0]}</div>\r\n                <div className='panel2 hidden'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Panel2 Maximised\r\n    if (isPanel2Maximised) {\r\n        return (\r\n            <div className='dock-container'>\r\n                <div className='panel1 hidden'>{children[0]}</div>\r\n                <div className='panel2'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (isRow) {\r\n        // Dock Right\r\n        if (isReversed) {\r\n            return (\r\n                <div className='dock-container row-reverse'>\r\n                    <div className='panel1 row-reverse'>{children[0]}</div>\r\n                    <div className='panel2 row-reverse'>{children[1]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        // Dock Left\r\n        return (\r\n            <div className='dock-container row'>\r\n                <div className='panel1 row'>{children[0]}</div>\r\n                <div className='panel2 row'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (isReversed) {\r\n        // Dock Bottom\r\n        return (\r\n            <div className='dock-container column-reverse'>\r\n                <div className='panel1 column-reverse'>{children[0]}</div>\r\n                <div className='panel2 column-reverse'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Dock Top\r\n    return (\r\n        <div className='dock-container column'>\r\n            <div className='panel1 column'>{children[0]}</div>\r\n            <div className='panel2 column'>{children[1]}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DockContainer;\r\n","export default __webpack_public_path__ + \"static/media/placeholderMD.98c01269.md\";","import React, { useState, useEffect, useContext } from 'react';\r\nimport marked from 'marked';\r\nimport DOMPurify from 'dompurify';\r\nimport placeholderText from './Resources/placeholderMD.md';\r\n\r\nconst MarkdownContext = React.createContext();\r\n\r\nconst MarkdownProvider = ({ children }) => {\r\n    const [editorText, setEditorText] = useState('');\r\n    const [editorLineNumbers, setEditorLineNumbers] = useState('1');\r\n    const [previewerHTML, setPreviewerHTML] = useState('');\r\n    const [isLightThemeActive, setIsLightThemeActive] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetchPlaceholderText();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateLineNumbers();\r\n        updatePreviewerText();\r\n    }, [editorText]);\r\n\r\n    const fetchPlaceholderText = async () => {\r\n        const response = await fetch(placeholderText);\r\n        const data = await response.text();\r\n\r\n        setEditorText(data);\r\n    };\r\n\r\n    const updateLineNumbers = () => {\r\n        var content = editorText.split('\\n');\r\n        let newLineNumbers = '';\r\n\r\n        for (let i = 1; i <= content.length; i++) {\r\n            newLineNumbers += `${i} \\n`;\r\n        }\r\n\r\n        setEditorLineNumbers(newLineNumbers);\r\n    };\r\n\r\n    const updatePreviewerText = () => {\r\n        marked.setOptions({ breaks: true });\r\n        const dirty = marked(editorText);\r\n        const clean = DOMPurify.sanitize(dirty, {\r\n            USE_PROFILES: { html: true },\r\n        });\r\n        setPreviewerHTML(clean);\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setIsLightThemeActive(!isLightThemeActive);\r\n    };\r\n\r\n    const copyTextToClipboard = (text) => {\r\n        if (!navigator.clipboard) {\r\n            fallbackCopyTextToClipboard(text);\r\n            return;\r\n        }\r\n        navigator.clipboard.writeText(text).then(\r\n            function () {\r\n                console.log('Async: Copying to clipboard was successful!');\r\n            },\r\n            function (error) {\r\n                console.error('Async: Could not copy text: ', error);\r\n            }\r\n        );\r\n    };\r\n\r\n    const fallbackCopyTextToClipboard = (text) => {\r\n        // Create new element\r\n        var element = document.createElement('textarea');\r\n        // Set value (string to be copied)\r\n        element.value = text;\r\n        // Set non-editable to avoid focus and move outside of view\r\n        element.setAttribute('readonly', '');\r\n        element.style = { position: 'absolute', left: '-9999px' };\r\n        document.body.appendChild(element);\r\n        // Select text inside element\r\n        element.select();\r\n        // Copy text to clipboard\r\n        try {\r\n            let wasSuccessful = document.execCommand('copy');\r\n            let message = wasSuccessful ? 'successful' : 'unsuccessful';\r\n            console.log(`Fallback: Copying text command was ${message}`);\r\n        } catch (error) {\r\n            console.error('Fallback: Was unable to copy', error);\r\n        }\r\n\r\n        // Remove temporary element\r\n        document.body.removeChild(element);\r\n    };\r\n\r\n    return (\r\n        <MarkdownContext.Provider\r\n            value={{\r\n                editorText,\r\n                setEditorText,\r\n                editorLineNumbers,\r\n                setEditorLineNumbers,\r\n                previewerHTML,\r\n                sePreviewerHTML: setPreviewerHTML,\r\n                isLightThemeActive,\r\n                toggleTheme,\r\n                copyTextToClipboard,\r\n            }}\r\n        >\r\n            {children}\r\n        </MarkdownContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMarkdownContext = () => {\r\n    return useContext(MarkdownContext);\r\n};\r\n\r\nexport { MarkdownContext, MarkdownProvider };\r\n","import React, { useState, useEffect } from 'react';\r\nimport '../Styles/tooltip.css';\r\n\r\nconst Tooltip = (props) => {\r\n    let toolTipDelay;\r\n    const { content, delay, position, children } = props;\r\n    const [isActive, setIsActive] = useState(false);\r\n\r\n    const showTooltip = () => {\r\n        toolTipDelay = setTimeout(() => {\r\n            setIsActive(true);\r\n        }, delay || 500);\r\n    };\r\n\r\n    const hideTooltip = () => {\r\n        clearTimeout(toolTipDelay);\r\n        setIsActive(false);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className='tooltip-wrapper'\r\n            onMouseEnter={showTooltip}\r\n            onMouseLeave={hideTooltip}\r\n        >\r\n            {children}\r\n            {isActive && (\r\n                <div className={`tooltip ${position || 'bottom'}`}>\r\n                    {content}\r\n                </div>\r\n            )}\r\n            <span className='tooltip-arrow' />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tooltip;\r\n","import { useState } from 'react';\r\nimport {\r\n    BiLayout,\r\n    BiDockLeft,\r\n    BiDockRight,\r\n    BiDockTop,\r\n    BiDockBottom,\r\n} from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\nimport Tooltip from './Tooltip';\r\n\r\nconst DropDownButton = () => {\r\n    const { setIsRow, setIsReversed } = useDockContext();\r\n\r\n    return (\r\n        <div className='dropdown'>\r\n            <Tooltip content='Layout'>\r\n                <button className='dropdown-btn'>\r\n                    <BiLayout aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Layout</span>\r\n                </button>\r\n            </Tooltip>\r\n            <div className='dropdown-content'>\r\n                <Tooltip content='Dock Left' position='left'>\r\n                    <button\r\n                        className='dropdown-btn'\r\n                        onClick={() => {\r\n                            setIsRow(true);\r\n                            setIsReversed(false);\r\n                        }}\r\n                    >\r\n                        <BiDockLeft aria-hidden={true} focusable={false} />\r\n                        <span className='visually-hidden'>\r\n                            Dock Editor Left\r\n                        </span>\r\n                    </button>\r\n                </Tooltip>\r\n                <Tooltip content='Dock Right' position='left'>\r\n                    <button\r\n                        className='dropdown-btn'\r\n                        onClick={() => {\r\n                            setIsRow(true);\r\n                            setIsReversed(true);\r\n                        }}\r\n                    >\r\n                        <BiDockRight aria-hidden={true} focusable={false} />\r\n                        <span className='visually-hidden'>\r\n                            Dock Editor Right\r\n                        </span>\r\n                    </button>\r\n                </Tooltip>\r\n                <Tooltip content='Dock Top' position='left'>\r\n                    <button\r\n                        className='dropdown-btn'\r\n                        onClick={() => {\r\n                            setIsRow(false);\r\n                            setIsReversed(false);\r\n                        }}\r\n                    >\r\n                        <BiDockTop aria-hidden={true} focusable={false} />\r\n                        <span className='visually-hidden'>Dock Editor Top</span>\r\n                    </button>\r\n                </Tooltip>\r\n                <Tooltip content='Dock Bottom' position='left'>\r\n                    <button\r\n                        className='dropdown-btn'\r\n                        onClick={() => {\r\n                            setIsRow(false);\r\n                            setIsReversed(true);\r\n                        }}\r\n                    >\r\n                        <BiDockBottom aria-hidden={true} focusable={false} />\r\n                        <span className='visually-hidden'>\r\n                            Dock Editor Bottom\r\n                        </span>\r\n                    </button>\r\n                </Tooltip>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DropDownButton;\r\n","import { useRef } from 'react';\r\nimport {\r\n    BiCopy,\r\n    BiExpand,\r\n    BiCollapse,\r\n    BiCodeAlt,\r\n    BiDetail,\r\n} from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\nimport { useMarkdownContext } from '../markdownContext';\r\nimport DropDownButton from './DropDownButton';\r\nimport Tooltip from './Tooltip';\r\n\r\nconst Editor = () => {\r\n    const {\r\n        editorText,\r\n        setEditorText,\r\n        editorLineNumbers,\r\n        copyTextToClipboard,\r\n    } = useMarkdownContext();\r\n\r\n    const {\r\n        isPanel1Maximised,\r\n        togglePanel1ExpandCollapse,\r\n        windowDimensions,\r\n        switchPanels,\r\n    } = useDockContext();\r\n    const scrollRef = useRef(null);\r\n\r\n    const handleScroll = (e) => {\r\n        scrollRef.current.scrollTop = e.target.scrollTop;\r\n    };\r\n\r\n    const toolbarSmall = (\r\n        <div>\r\n            <Tooltip content='Copy' position='bottom'>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={() => copyTextToClipboard(editorText)}\r\n                >\r\n                    <BiCopy aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Copy Editor Text</span>\r\n                </button>\r\n            </Tooltip>\r\n            <Tooltip content='Previewer'>\r\n                <button className='icon-btn' onClick={switchPanels}>\r\n                    <BiDetail aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Switch To Previewer</span>\r\n                </button>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n\r\n    const toolbarLarge = (\r\n        <div>\r\n            <Tooltip content='Copy'>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={() => copyTextToClipboard(editorText)}\r\n                >\r\n                    <BiCopy aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Copy Editor text</span>\r\n                </button>\r\n            </Tooltip>\r\n            <DropDownButton />\r\n            <Tooltip content={isPanel1Maximised ? 'Collapse' : 'Expand'}>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={togglePanel1ExpandCollapse}\r\n                >\r\n                    {isPanel1Maximised ? (\r\n                        <>\r\n                            <BiCollapse aria-hidden={true} focusable={false} />\r\n                            <span className='visually-hidden'>\r\n                                Collapse Editor\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <BiExpand aria-hidden={true} focusable={false} />\r\n                            <span className='visually-hidden'>\r\n                                Expand Editor\r\n                            </span>\r\n                        </>\r\n                    )}\r\n                </button>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <header className='editor-header'>\r\n                <div>\r\n                    <BiCodeAlt\r\n                        className='header-icon'\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                    <h2>Editor</h2>\r\n                </div>\r\n                {windowDimensions.width <= 768 ? toolbarSmall : toolbarLarge}\r\n            </header>\r\n            <div className='editor-input-container'>\r\n                <label htmlFor='lineNumbers' className='visually-hidden'>\r\n                    Editor Line Numbers\r\n                </label>\r\n                <textarea\r\n                    id='lineNumbers'\r\n                    className='line-numbers'\r\n                    readOnly={true}\r\n                    focusable={false}\r\n                    value={editorLineNumbers}\r\n                    ref={scrollRef}\r\n                    tabIndex='-1'\r\n                />\r\n\r\n                <label htmlFor='editor' className='visually-hidden'>\r\n                    Markdown Editor\r\n                </label>\r\n                <textarea\r\n                    id='editor'\r\n                    className='editor-input'\r\n                    wrap='off'\r\n                    value={editorText}\r\n                    autoFocus={true}\r\n                    onChange={(e) => setEditorText(e.target.value)}\r\n                    onScroll={(e) => handleScroll(e)}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import {\r\n    BiCopy,\r\n    BiExpand,\r\n    BiCollapse,\r\n    BiDetail,\r\n    BiCodeAlt,\r\n} from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\nimport { useMarkdownContext } from '../markdownContext';\r\nimport Tooltip from './Tooltip';\r\n\r\nconst Previewer = () => {\r\n    const { previewerHTML, copyTextToClipboard } = useMarkdownContext();\r\n    const {\r\n        isPanel2Maximised,\r\n        togglePanel2ExpandCollapse,\r\n        windowDimensions,\r\n        switchPanels,\r\n    } = useDockContext();\r\n\r\n    const toolbarSmall = (\r\n        <div>\r\n            <Tooltip content='Copy'>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={() => copyTextToClipboard(previewerHTML)}\r\n                >\r\n                    <BiCopy aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Copy Previewer HTML</span>\r\n                </button>\r\n            </Tooltip>\r\n            <Tooltip content='Editor'>\r\n                <button className='icon-btn' onClick={switchPanels}>\r\n                    <BiCodeAlt aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Switch To Editor</span>\r\n                </button>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n\r\n    const toolbarLarge = (\r\n        <div>\r\n            <Tooltip content='Copy'>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={() => copyTextToClipboard(previewerHTML)}\r\n                >\r\n                    <BiCopy aria-hidden={true} focusable={false} />\r\n                    <span className='visually-hidden'>Copy Previewer HTML</span>\r\n                </button>\r\n            </Tooltip>\r\n            <Tooltip content={isPanel2Maximised ? 'Collapse' : 'Expand'}>\r\n                <button\r\n                    className='icon-btn'\r\n                    onClick={togglePanel2ExpandCollapse}\r\n                >\r\n                    {isPanel2Maximised ? (\r\n                        <>\r\n                            <BiCollapse aria-hidden={true} focusable={false} />\r\n                            <span className='visually-hidden'>\r\n                                Collapse Previewer\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <BiExpand aria-hidden={true} focusable={false} />\r\n                            <span className='visually-hidden'>\r\n                                Expand Previewer\r\n                            </span>\r\n                        </>\r\n                    )}\r\n                </button>\r\n            </Tooltip>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <header className='editor-header'>\r\n                <div>\r\n                    <BiDetail\r\n                        className='header-icon'\r\n                        aria-hidden={true}\r\n                        focusable={false}\r\n                    />\r\n                    <h2>Previewer</h2>\r\n                </div>\r\n                {windowDimensions.width <= 768 ? toolbarSmall : toolbarLarge}\r\n            </header>\r\n            <div\r\n                id='preview'\r\n                className='previewer'\r\n                dangerouslySetInnerHTML={{ __html: previewerHTML }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Previewer;\r\n","import DockContainer from './Components/DockContainer';\r\nimport Editor from './Components/Editor';\r\nimport Previewer from './Components/Previewer';\r\nimport { DockProvider } from './dockContext';\r\nimport { BiSun, BiMoon, BiToggleLeft, BiToggleRight } from 'react-icons/bi';\r\nimport { useMarkdownContext } from './markdownContext';\r\n\r\nfunction App() {\r\n    const { isLightThemeActive, toggleTheme } = useMarkdownContext();\r\n\r\n    return (\r\n        <main\r\n            className={`${isLightThemeActive ? 'light-theme' : 'dark-theme'}`}\r\n        >\r\n            <header className='header'>\r\n                <h1>\r\n                    <span>{'{ '}</span>MarkdownPreviewer<span>{' }'}</span>\r\n                </h1>\r\n                <button className='theme-toggle' onClick={toggleTheme}>\r\n                    {isLightThemeActive ? (\r\n                        <>\r\n                            <BiSun\r\n                                className='theme-toggle-light-icon'\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                            <BiToggleLeft\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                            <span className='visually-hidden'>\r\n                                Toggle Dark Mode\r\n                            </span>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <BiMoon\r\n                                className='theme-toggle-dark-icon'\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                            <BiToggleRight\r\n                                aria-hidden={true}\r\n                                focusable={false}\r\n                            />\r\n                            <span className='visually-hidden'>\r\n                                Toggle Light Mode\r\n                            </span>\r\n                        </>\r\n                    )}\r\n                </button>\r\n            </header>\r\n            <DockProvider>\r\n                <DockContainer className='container'>\r\n                    <Editor />\r\n                    <Previewer />\r\n                </DockContainer>\r\n            </DockProvider>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MarkdownProvider } from './markdownContext';\nimport './Styles/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MarkdownProvider>\n            <App />\n        </MarkdownProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}