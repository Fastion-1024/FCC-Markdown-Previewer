{"version":3,"sources":["dockContext.js","Components/DockContainer.js","Resources/placeholderMD.md","markdownContext.js","Components/DropDownButton.js","Components/Editor.js","Components/Previewer.js","App.js","index.js"],"names":["DockContext","React","createContext","DockProvider","children","useState","isRow","setIsRow","isReversed","setIsReversed","isPanel1Maximised","setIsPanel1Maximised","isPanel2Maximised","setIsPanel2Maximised","Provider","value","togglePanel1ExpandCollapse","togglePanel2ExpandCollapse","useDockContext","useContext","DockContainer","className","MarkdownContext","MarkdownProvider","editorText","setEditorText","editorLineNumbers","setEditorLineNumbers","previewerHTML","setPreviewerHTML","isLightThemeActive","setIsLightThemeActive","useEffect","fetchPlaceholderText","updateLineNumbers","updatePreviewerText","a","fetch","placeholderText","response","text","data","content","split","newLineNumbers","i","length","marked","setOptions","breaks","dirty","clean","DOMPurify","sanitize","USE_PROFILES","html","console","log","sePreviewerHTML","toggleTheme","useMarkdownContext","DropDownButton","onClick","Editor","scrollRef","useRef","readOnly","ref","id","wrap","onChange","e","target","onScroll","current","scrollTop","handleScroll","Previewer","dangerouslySetInnerHTML","__html","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23069f85.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\r\n\r\nconst DockContext = React.createContext();\r\n\r\nconst DockProvider = ({ children }) => {\r\n    const [isRow, setIsRow] = useState(true);\r\n    const [isReversed, setIsReversed] = useState(false);\r\n    const [isPanel1Maximised, setIsPanel1Maximised] = useState(false);\r\n    const [isPanel2Maximised, setIsPanel2Maximised] = useState(false);\r\n\r\n    const togglePanel1ExpandCollapse = () => {\r\n        // Only one panel may be expanded at a time.\r\n        setIsPanel1Maximised(!isPanel1Maximised);\r\n        isPanel1Maximised && setIsPanel2Maximised(false);\r\n    };\r\n\r\n    const togglePanel2ExpandCollapse = () => {\r\n        // Only one panel may be expanded at a time.\r\n        setIsPanel2Maximised(!isPanel2Maximised);\r\n        isPanel2Maximised && setIsPanel1Maximised(false);\r\n    };\r\n\r\n    return (\r\n        <DockContext.Provider\r\n            value={{\r\n                isRow,\r\n                isReversed,\r\n                setIsRow,\r\n                setIsReversed,\r\n                isPanel1Maximised,\r\n                isPanel2Maximised,\r\n                togglePanel1ExpandCollapse,\r\n                togglePanel2ExpandCollapse,\r\n            }}\r\n        >\r\n            {children}\r\n        </DockContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useDockContext = () => {\r\n    return useContext(DockContext);\r\n};\r\n\r\nexport { DockContext, DockProvider };\r\n","import { useDockContext } from '../dockContext';\r\n\r\nconst DockContainer = ({ children }) => {\r\n    const { isRow, isReversed, isPanel1Maximised, isPanel2Maximised } =\r\n        useDockContext();\r\n\r\n    // Panel1 Maximised\r\n    if (isPanel1Maximised) {\r\n        return (\r\n            <div className='dock-container'>\r\n                <div className='panel1'>{children[0]}</div>\r\n                <div className='panel2 hidden'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Panel2 Maximised\r\n    if (isPanel2Maximised) {\r\n        return (\r\n            <div className='dock-container'>\r\n                <div className='panel1 hidden'>{children[0]}</div>\r\n                <div className='panel2'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (isRow) {\r\n        // Dock Right\r\n        if (isReversed) {\r\n            return (\r\n                <div className='dock-container row-reverse'>\r\n                    <div className='panel1 row-reverse'>{children[0]}</div>\r\n                    <div className='panel2 row-reverse'>{children[1]}</div>\r\n                </div>\r\n            );\r\n        }\r\n        // Dock Left\r\n        return (\r\n            <div className='dock-container row'>\r\n                <div className='panel1 row'>{children[0]}</div>\r\n                <div className='panel2 row'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (isReversed) {\r\n        // Dock Bottom\r\n        return (\r\n            <div className='dock-container column-reverse'>\r\n                <div className='panel1 column-reverse'>{children[0]}</div>\r\n                <div className='panel2 column-reverse'>{children[1]}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Dock Top\r\n    return (\r\n        <div className='dock-container column'>\r\n            <div className='panel1 column'>{children[0]}</div>\r\n            <div className='panel2 column'>{children[1]}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DockContainer;\r\n","export default __webpack_public_path__ + \"static/media/placeholderMD.98c01269.md\";","import React, { useState, useEffect, useContext } from 'react';\r\nimport marked from 'marked';\r\nimport DOMPurify from 'dompurify';\r\nimport placeholderText from './Resources/placeholderMD.md';\r\n\r\nconst MarkdownContext = React.createContext();\r\n\r\nconst MarkdownProvider = ({ children }) => {\r\n    const [editorText, setEditorText] = useState('');\r\n    const [editorLineNumbers, setEditorLineNumbers] = useState('1');\r\n    const [previewerHTML, setPreviewerHTML] = useState('');\r\n    const [isLightThemeActive, setIsLightThemeActive] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetchPlaceholderText();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateLineNumbers();\r\n        updatePreviewerText();\r\n    }, [editorText]);\r\n\r\n    const fetchPlaceholderText = async () => {\r\n        const response = await fetch(placeholderText);\r\n        const data = await response.text();\r\n\r\n        setEditorText(data);\r\n    };\r\n\r\n    const updateLineNumbers = () => {\r\n        var content = editorText.split('\\n');\r\n        let newLineNumbers = '';\r\n\r\n        for (let i = 1; i <= content.length; i++) {\r\n            newLineNumbers += `${i} \\n`;\r\n        }\r\n\r\n        setEditorLineNumbers(newLineNumbers);\r\n    };\r\n\r\n    const updatePreviewerText = () => {\r\n        marked.setOptions({ breaks: true });\r\n        const dirty = marked(editorText);\r\n        const clean = DOMPurify.sanitize(dirty, {\r\n            USE_PROFILES: { html: true },\r\n        });\r\n        console.log(clean);\r\n        setPreviewerHTML(clean);\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setIsLightThemeActive(!isLightThemeActive);\r\n    };\r\n\r\n    return (\r\n        <MarkdownContext.Provider\r\n            value={{\r\n                editorText,\r\n                setEditorText,\r\n                editorLineNumbers,\r\n                setEditorLineNumbers,\r\n                previewerHTML,\r\n                sePreviewerHTML: setPreviewerHTML,\r\n                isLightThemeActive,\r\n                toggleTheme,\r\n            }}\r\n        >\r\n            {children}\r\n        </MarkdownContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useMarkdownContext = () => {\r\n    return useContext(MarkdownContext);\r\n};\r\n\r\nexport { MarkdownContext, MarkdownProvider };\r\n","import { useState } from 'react';\r\nimport {\r\n    BiLayout,\r\n    BiDockLeft,\r\n    BiDockRight,\r\n    BiDockTop,\r\n    BiDockBottom,\r\n} from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\n\r\nconst DropDownButton = () => {\r\n    const { setIsRow, setIsReversed } = useDockContext();\r\n\r\n    return (\r\n        <div className='dropdown'>\r\n            <button className='dropdown-btn'>\r\n                <BiLayout />\r\n            </button>\r\n            <div className='dropdown-content'>\r\n                <button\r\n                    className='dropdown-btn'\r\n                    onClick={() => {\r\n                        setIsRow(true);\r\n                        setIsReversed(false);\r\n                    }}\r\n                >\r\n                    <BiDockLeft />\r\n                </button>\r\n                <button\r\n                    className='dropdown-btn'\r\n                    onClick={() => {\r\n                        setIsRow(true);\r\n                        setIsReversed(true);\r\n                    }}\r\n                >\r\n                    <BiDockRight />\r\n                </button>\r\n                <button\r\n                    className='dropdown-btn'\r\n                    onClick={() => {\r\n                        setIsRow(false);\r\n                        setIsReversed(false);\r\n                    }}\r\n                >\r\n                    <BiDockTop />\r\n                </button>\r\n                <button\r\n                    className='dropdown-btn'\r\n                    onClick={() => {\r\n                        setIsRow(false);\r\n                        setIsReversed(true);\r\n                    }}\r\n                >\r\n                    <BiDockBottom />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DropDownButton;\r\n","import { useRef } from 'react';\r\nimport { BiCopy, BiExpand, BiCollapse, BiCodeAlt } from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\nimport { useMarkdownContext } from '../markdownContext';\r\nimport DropDownButton from './DropDownButton';\r\n\r\nconst Editor = () => {\r\n    const { editorText, setEditorText, editorLineNumbers } =\r\n        useMarkdownContext();\r\n\r\n    const { isPanel1Maximised, togglePanel1ExpandCollapse } = useDockContext();\r\n    const scrollRef = useRef(null);\r\n\r\n    const handleScroll = (e) => {\r\n        scrollRef.current.scrollTop = e.target.scrollTop;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <header className='editor-header'>\r\n                <div>\r\n                    <BiCodeAlt className='header-icon' />\r\n                    <h2>Editor</h2>\r\n                </div>\r\n                <div>\r\n                    <button className='icon-btn'>\r\n                        <BiCopy />\r\n                    </button>\r\n                    <DropDownButton />\r\n                    <button\r\n                        className='icon-btn'\r\n                        onClick={togglePanel1ExpandCollapse}\r\n                    >\r\n                        {isPanel1Maximised ? <BiCollapse /> : <BiExpand />}\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <div className='editor-input-container'>\r\n                <textarea\r\n                    className='line-numbers'\r\n                    readOnly={true}\r\n                    value={editorLineNumbers}\r\n                    ref={scrollRef}\r\n                />\r\n\r\n                <textarea\r\n                    id='editor'\r\n                    className='editor-input'\r\n                    wrap='off'\r\n                    value={editorText}\r\n                    onChange={(e) => setEditorText(e.target.value)}\r\n                    onScroll={(e) => handleScroll(e)}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import { BiCopy, BiExpand, BiCollapse, BiDetail } from 'react-icons/bi';\r\nimport { useDockContext } from '../dockContext';\r\nimport { useMarkdownContext } from '../markdownContext';\r\n\r\nconst Previewer = () => {\r\n    const { previewerHTML } = useMarkdownContext();\r\n    const { isPanel2Maximised, togglePanel2ExpandCollapse } = useDockContext();\r\n\r\n    return (\r\n        <>\r\n            <header className='editor-header'>\r\n                <div>\r\n                    <BiDetail className='header-icon' />\r\n                    <h2>Previewer</h2>\r\n                </div>\r\n                <div>\r\n                    <button className='icon-btn'>\r\n                        <BiCopy />\r\n                    </button>\r\n                    <button\r\n                        className='icon-btn'\r\n                        onClick={togglePanel2ExpandCollapse}\r\n                    >\r\n                        {isPanel2Maximised ? <BiCollapse /> : <BiExpand />}\r\n                    </button>\r\n                </div>\r\n            </header>\r\n            <div\r\n                id='preview'\r\n                className='previewer'\r\n                dangerouslySetInnerHTML={{ __html: previewerHTML }}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Previewer;\r\n","import DockContainer from './Components/DockContainer';\r\nimport Editor from './Components/Editor';\r\nimport Previewer from './Components/Previewer';\r\nimport { DockProvider } from './dockContext';\r\nimport { BiSun, BiMoon, BiToggleLeft, BiToggleRight } from 'react-icons/bi';\r\nimport { useMarkdownContext } from './markdownContext';\r\n\r\nfunction App() {\r\n    const { isLightThemeActive, toggleTheme } = useMarkdownContext();\r\n\r\n    return (\r\n        <main\r\n            className={`${isLightThemeActive ? 'light-theme' : 'dark-theme'}`}\r\n        >\r\n            <header className='header'>\r\n                <h1>\r\n                    <span>{'{ '}</span>MarkdownPreviewer<span>{' }'}</span>\r\n                </h1>\r\n                <button className='theme-toggle' onClick={toggleTheme}>\r\n                    {isLightThemeActive ? (\r\n                        <BiSun className='theme-toggle-light-icon' />\r\n                    ) : (\r\n                        <BiMoon className='theme-toggle-dark-icon' />\r\n                    )}\r\n                    {isLightThemeActive ? <BiToggleLeft /> : <BiToggleRight />}\r\n                </button>\r\n            </header>\r\n            <DockProvider>\r\n                <DockContainer className='container'>\r\n                    <Editor />\r\n                    <Previewer />\r\n                </DockContainer>\r\n            </DockProvider>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { MarkdownProvider } from './markdownContext';\nimport './Styles/index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <MarkdownProvider>\n            <App />\n        </MarkdownProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}